apiVersion: v1
kind: Namespace
metadata:
  name: vote
  labels:
    name: vote
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: vote-sc
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2
  fsType: ext4
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer  # delay binding
---
apiVersion: v1
kind: Secret
metadata:
  name: vote-secret
  namespace: vote
type: Opaque
data:
  POSTGRES_PASSWORD: cG9zdGdyZXM=  # echo -n postgres | base64
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vote-configmap
  namespace: vote
data:
  POSTGRES_USER: postgres          # PostgreSQL username
  POSTGRES_DB: postgres            # Database name to create
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: vote
spec:
  storageClassName: vote-sc  # Reference to the StorageClass
  accessModes:
    - ReadWriteOnce  # Only one node can mount the volume
  resources:
    requests:
      storage: 1Gi  # Request for 1Gi storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: vote
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:alpine
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data  # Path inside the container where the volume will be mounted
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc  # Reference to the PVC
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: vote
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: vote
spec:
  storageClassName: vote-svc  # Reference to the StorageClass
  accessModes:
    - ReadWriteOnce  # Only one node can mount the volume
  resources:
    requests:
      storage: 1Gi  # Request  for 1Gi of storage
---
apiVersion: apps/v1 # postgres deployment
kind: Deployment
metadata:
  name: db
  namespace: vote
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: voteapp-configmap
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: vote-secret
              key: POSTGRES_PASSWORD
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-storage  # Match the volume name here
          subPath: postgres
        resources:
          requests:
            memory: "256Mi"  # Reduced memory request
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1 # postgres service
kind: Service
metadata:
  name: db
  namespace: vote
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1 # vote deployment
kind: Deployment
metadata:
  name: vote
  namespace: vote
spec:
  replicas: 3
  selector:
    matchLabels:
      app: vote
  template:
    metadata:
      labels:
        app: vote
    spec:
      containers:
      - name: vote
        image: dockersamples/examplevotingapp_vote:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"  # Minimum memory required
            cpu: "100m"      # Minimum CPU required
---
apiVersion: v1 # vote service
kind: Service
metadata:
  name: vote-svc
  namespace: vote
spec:
  selector:
    app: vote
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: apps/v1 # worker deployment
kind: Deployment
metadata:
  name: worker
  namespace: vote
spec:
  replicas: 3
  selector:
    matchLabels:
      app: worker
  template:
    metadata:
      labels:
        app: worker
    spec:
      containers:
      - name: worker
        image: dockersamples/examplevotingapp_worker:latest
        resources:
          requests:
            memory: "64Mi"  # Minimum memory required
            cpu: "100m"      # Minimum CPU required
---
apiVersion: apps/v1 # result deployment
kind: Deployment
metadata:
  name: result
  namespace: vote
spec:
  replicas: 3
  selector:
    matchLabels:
      app: result
  template:
    metadata:
      labels:
        app: result
    spec:
      containers:
      - name: result
        image: dockersamples/examplevotingapp_result:latest
        ports:
        - containerPort: 80  # Container port
        resources:
          requests:
            memory: "64Mi"  # Minimum memory required
            cpu: "100m"      # Minimum CPU required
---
apiVersion: v1 # result service
kind: Service
metadata:
  name: result
  namespace: vote
spec:
  selector:
    app: result
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80







